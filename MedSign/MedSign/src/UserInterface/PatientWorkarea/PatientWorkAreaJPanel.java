/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.PatientWorkarea;

import Business.Appointment.Appointment;
import Business.AppointmentControl;
import Business.Person.Doctor;
import Business.Person.Patient;
import Business.Person.Staff;
import Business.UserAccount.UserAccount;
import DataManagement.DatabaseFactory;
import UserInterface.DoctorWorkarea.ViewDoctorAppointmentJDialog;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Alex
 */
public class PatientWorkAreaJPanel extends javax.swing.JPanel {

    AppointmentControl appointmentControl;
    UserAccount userAccount;
    private JPanel userProcessContainer;
    private javax.swing.JFrame parent;

    /**
     * Creates new form WorkAreaJPanel
     */
    public PatientWorkAreaJPanel(JPanel userProcessContainer, UserAccount userAccount, javax.swing.JFrame parent) {
        initComponents();
        this.userAccount = userAccount;
        this.userProcessContainer = userProcessContainer;
        this.parent = parent;
        appointmentControl = AppointmentControl.getInstance();
        populateInfoField();
        populateTable();
    }

    private void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) tbl_Appointment.getModel();
        dtm.setRowCount(0);
        for (Appointment a : appointmentControl.getAppointmentHistory().getPatientAppointmentList((Patient) userAccount.getPerson())) {
            Object[] row = new Object[3];
            row[0] = a;
            row[1] = a.getDateTime();
            row[2] = a.getStatus();
            dtm.addRow(row);
        }
    }

    private void populateInfoField() {
        lbName.setText(userAccount.getPerson().getFullName());
        lbPatientId.setText(((Patient) userAccount.getPerson()).getPatientId());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        BackGround = new javax.swing.JPanel();
        Information = new javax.swing.JPanel();
        lb1 = new javax.swing.JLabel();
        lb2 = new javax.swing.JLabel();
        lbName = new javax.swing.JLabel();
        lbPatientId = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_Appointment = new javax.swing.JTable();
        Button = new javax.swing.JPanel();
        btMakeAppointment = new javax.swing.JButton();
        btViewAppointment = new javax.swing.JButton();
        btCancelAppointment = new javax.swing.JButton();
        btLogoff = new javax.swing.JButton();
        lbPortrait = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        Information.setLayout(new java.awt.GridBagLayout());

        lb1.setText("Name:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        Information.add(lb1, gridBagConstraints);

        lb2.setText("Patient ID:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        Information.add(lb2, gridBagConstraints);

        lbName.setText("****************");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        Information.add(lbName, gridBagConstraints);

        lbPatientId.setText("****************");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        Information.add(lbPatientId, gridBagConstraints);

        tbl_Appointment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Date/Time", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_Appointment.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tbl_Appointment);
        if (tbl_Appointment.getColumnModel().getColumnCount() > 0) {
            tbl_Appointment.getColumnModel().getColumn(0).setPreferredWidth(20);
            tbl_Appointment.getColumnModel().getColumn(2).setPreferredWidth(20);
        }

        Button.setLayout(new java.awt.GridBagLayout());

        btMakeAppointment.setText("Make");
        btMakeAppointment.setMaximumSize(new java.awt.Dimension(50, 50));
        btMakeAppointment.setMinimumSize(new java.awt.Dimension(50, 50));
        btMakeAppointment.setPreferredSize(new java.awt.Dimension(70, 50));
        btMakeAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMakeAppointmentActionPerformed(evt);
            }
        });
        Button.add(btMakeAppointment, new java.awt.GridBagConstraints());

        btViewAppointment.setText("View");
        btViewAppointment.setMaximumSize(new java.awt.Dimension(50, 50));
        btViewAppointment.setMinimumSize(new java.awt.Dimension(50, 50));
        btViewAppointment.setPreferredSize(new java.awt.Dimension(70, 50));
        btViewAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btViewAppointmentActionPerformed(evt);
            }
        });
        Button.add(btViewAppointment, new java.awt.GridBagConstraints());

        btCancelAppointment.setText("Cancel");
        btCancelAppointment.setMaximumSize(new java.awt.Dimension(50, 50));
        btCancelAppointment.setMinimumSize(new java.awt.Dimension(50, 50));
        btCancelAppointment.setPreferredSize(new java.awt.Dimension(70, 50));
        btCancelAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelAppointmentActionPerformed(evt);
            }
        });
        Button.add(btCancelAppointment, new java.awt.GridBagConstraints());

        btLogoff.setText("Logoff");
        btLogoff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLogoffActionPerformed(evt);
            }
        });

        lbPortrait.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/PatientWorkarea/patient.jpg"))); // NOI18N

        javax.swing.GroupLayout BackGroundLayout = new javax.swing.GroupLayout(BackGround);
        BackGround.setLayout(BackGroundLayout);
        BackGroundLayout.setHorizontalGroup(
            BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackGroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                    .addGroup(BackGroundLayout.createSequentialGroup()
                        .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btLogoff)
                            .addGroup(BackGroundLayout.createSequentialGroup()
                                .addComponent(lbPortrait)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Information, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        BackGroundLayout.setVerticalGroup(
            BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BackGroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(BackGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Information, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPortrait))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btLogoff)
                .addContainerGap())
        );

        add(BackGround, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btMakeAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMakeAppointmentActionPerformed
        // TODO add your handling code here:
        MakeAppointmentJDialog jdialog = new MakeAppointmentJDialog(parent, true, appointmentControl.getUserAccountDirectory().getDoctorAccount(), (Patient) userAccount.getPerson());
        jdialog.setVisible(true);
        populateTable();
    }//GEN-LAST:event_btMakeAppointmentActionPerformed

    private void btViewAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btViewAppointmentActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbl_Appointment.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.");
            return;
        }
        Appointment appointment = (Appointment) tbl_Appointment.getValueAt(selectedRow, 0);
        ViewPatientAppointmentJDialog jdialog = new ViewPatientAppointmentJDialog(parent, true, appointment, appointmentControl.getUserAccountDirectory().getDoctorAccount());
        jdialog.setVisible(true);
    }//GEN-LAST:event_btViewAppointmentActionPerformed

    private void btCancelAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelAppointmentActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbl_Appointment.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.");
            return;
        }
        Appointment appointment = (Appointment) tbl_Appointment.getValueAt(selectedRow, 0);
        if (!appointment.getStatus().equals(Appointment.StatusType.Valid)) {
            JOptionPane.showMessageDialog(null, "You can't cancel this appointment.");
            return;
        }
        appointment.cancel();
        DatabaseFactory.getInstance().storeSystem();
        populateTable();
    }//GEN-LAST:event_btCancelAppointmentActionPerformed

    private void btLogoffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLogoffActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        ((CardLayout) userProcessContainer.getLayout()).previous(userProcessContainer);
    }//GEN-LAST:event_btLogoffActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BackGround;
    private javax.swing.JPanel Button;
    private javax.swing.JPanel Information;
    private javax.swing.JButton btCancelAppointment;
    private javax.swing.JButton btLogoff;
    private javax.swing.JButton btMakeAppointment;
    private javax.swing.JButton btViewAppointment;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb1;
    private javax.swing.JLabel lb2;
    private javax.swing.JLabel lbName;
    private javax.swing.JLabel lbPatientId;
    private javax.swing.JLabel lbPortrait;
    private javax.swing.JTable tbl_Appointment;
    // End of variables declaration//GEN-END:variables
}
